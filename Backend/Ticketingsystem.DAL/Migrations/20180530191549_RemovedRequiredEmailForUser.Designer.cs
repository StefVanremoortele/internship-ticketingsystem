// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Ticketingsystem.DAL;
using Ticketingsystem.Domain.Models;

namespace Ticketingsystem.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180530191549_RemovedRequiredEmailForUser")]
    partial class RemovedRequiredEmailForUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ticketingsystem.Domain.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("End");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("Start");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Ticketingsystem.Domain.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateClosed");

                    b.Property<DateTime>("DateOpened");

                    b.Property<int>("OrderState");

                    b.Property<string>("UserId");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Ticketingsystem.Domain.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("OrderId");

                    b.Property<int>("TicketCategoryId");

                    b.Property<int>("TicketStatus");

                    b.HasKey("TicketId");

                    b.HasIndex("EventId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TicketCategoryId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Ticketingsystem.Domain.Models.TicketCategory", b =>
                {
                    b.Property<int>("TicketCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Price");

                    b.Property<int>("Type");

                    b.HasKey("TicketCategoryId");

                    b.ToTable("TicketCategory");
                });

            modelBuilder.Entity("Ticketingsystem.Domain.Models.TicketHistory", b =>
                {
                    b.Property<int>("TicketHistoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("OrderId");

                    b.Property<int>("TicketAction");

                    b.Property<int>("TicketId");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("TicketHistoryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketHistory");
                });

            modelBuilder.Entity("Ticketingsystem.Domain.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsLoggedIn");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserName");

                    b.Property<int>("UserType");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Ticketingsystem.Domain.Models.Order", b =>
                {
                    b.HasOne("Ticketingsystem.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Ticketingsystem.Domain.Models.Ticket", b =>
                {
                    b.HasOne("Ticketingsystem.Domain.Models.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ticketingsystem.Domain.Models.Order", "Order")
                        .WithMany("Tickets")
                        .HasForeignKey("OrderId");

                    b.HasOne("Ticketingsystem.Domain.Models.TicketCategory", "TicketCategory")
                        .WithMany()
                        .HasForeignKey("TicketCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ticketingsystem.Domain.Models.TicketHistory", b =>
                {
                    b.HasOne("Ticketingsystem.Domain.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ticketingsystem.Domain.Models.Ticket", "Ticket")
                        .WithMany("TicketHistory")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
